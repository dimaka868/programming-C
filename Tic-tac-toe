/* Игра в крестики-нолики */ 
#include <stdio.h> 
#include <stdlib.h> 
#define SPACE ' ' 
char matrix[3][3] = {{SPACE, SPACE, SPACE},{SPACE, SPACE, SPACE},{SPACE, SPACE, SPACE}} ; 

void computer(int); 
void player(int); 
void visual(int); 
char check(void); 

main() 
{ 
  srand(time(NULL)); 
  char win, p1[]="Компьютер 1", p2[]="Компьютер 2"; 
  int a, b, i, count=0; 
  printf("Игра в крестики нолики.\n"); 
  printf("Дизайны интерфейса:\n"); 
  printf("Дизайн 1:\n"); visual(1); 
  printf("Дизайн 2:\n"); visual(2); 
  printf("Дизайн 3:\n"); visual(3); 
  printf("Выберите дизайн интерфейса:"); scanf("%d", &a); 
  printf("Режимы игры:\n"); 
  printf("Режим 1: Игрок против игрока\nРежим 2: Игрок против компьютера\nРежим 3: Компьютер против компьютера\n"); 
  printf("Выберите режим игры:"); scanf("%d", &b); 
  while(b!=1 && b!=2 && b!=3) 
  { 
    printf("Вы выбрали неправильный режим игры. Выберите 1, 2 или 3:"); 
    scanf("%d", &b); 
  } 
  if(b==1) 
  { 
    printf("Введите ник Игрока 1:"); scanf("%s", p1); 
    printf("Введите ник Игрока 2:"); scanf("%s", p2); 
  } 
  else 
  if(b==2) 
  { 
    printf("Введите ник Игрока 1:"); scanf("%s", p1); 
  } 
  win = SPACE; 
  do
  { 
    system("clear"); /*Команда linux для очистки терминала*/ 
    printf("Ходит (X):"); 
    for(i=0; p1[i]!='\0'; i++) printf("%c", p1[i]); printf("\n"); 
    visual(a); /* Вывод игровой доски */ 
    if(b==3) 
    { 
    computer(1); /* Ходит Компьютер 1 */ 
    count++; 
    } 
    else 
    { 
      player(1); /* Ходит Игрок 1 */ 
      count++; 
    } 
    win = check(); /* Проверка на победу */ 
    if(win==SPACE && count==9) 
    { 
      visual(a); 
      printf("Ничья!\n"); 
      exit(0); 
    } 
    if(win!=SPACE) break; /* Победитель */ 
    printf("Ходит (O):"); 
    for(i=0; p2[i]!='\0'; i++) 
    printf("%c", p2[i]); 
    printf("\n"); 
    visual(a); 
    if(b==1) 
    { 
      player(2); /*Ходит Игрок 2 */ 
      count++; 
    } 
    else 
    { 
      computer(2); /* Ходит Компьютер 2 */ 
      count++; 
    } 
    win=check(); /* Проверка на победу */ 
    if(win==SPACE && count==9) 
    { 
      visual(a); 
      printf("Ничья!\n"); 
      exit(0); 
    } 
    if(win!=SPACE) break; /* Победитель */ 
  }
  while(win==SPACE); 
  if(win=='X') 
  { 
    printf("Победитель: "); 
    for(i=0; p1[i]!='\0'; i++) printf("%c", p1[i]); 
    printf("\n"); 
  } 
    else 
    if(win=='O') 
  { 
    printf("Победитель:"); 
    for(i=0; p2[i]!='\0'; i++) printf("%c", p2[i]); 
    printf("\n"); 
  } 
  visual(a); /* Отображение результирующего положения */ 
  return 0; 
} 

/* Ввод хода Игрока */ 
void player(int a) 
{ 
  int x,y; 
  printf("Укажите координаты 'X'.\n"); 
  printf("Номер строки:"); scanf ("%d", &x); 
  printf("Номер столбца:"); scanf("%d", &y); 
  x--; y--; 
  if (x<0 || y<0 || x>2 || y>2 || matrix[x][y]!=SPACE) 
  { 
    printf("Неправильные координаты. Возможно клетка занята. Попробуйте снова.\n"); 
    player(a); 
  } 
else 
  { 
    if(a==1) 
      matrix[x][y]='X'; 
    else 
      matrix[x][y]='O'; 
  } 
} 

/* Ход компьютера */ 
void computer(int a) 
{ 
  int i,j; 
  do 
  { 
    i=rand()%3; 
    j=rand()%3; 
  } 
while (matrix[i][j]!=SPACE); 
  if(a==1) 
    matrix[i][j]='X'; 
else 
  matrix[i][j]='O'; 
} 
/* Отображение игровой доски */ 
void visual(int a) 
{ 
  int i; 
  for(i=0; i<3; i++) 
  { 
    if(a==1) 
    { 
      system("setterm -foreground green -bold on -underline on"); /*Команда linux для изменения цвета шрифта, жирности и подчеркнутости*/ 
      printf(" %c | %c | %c ", matrix[i][0], matrix[i][1], matrix[i][2]); 
      if(i!=2) 
      printf("\n"); 
    } 
  else 
    if(a==2) 
    { 
      system("setterm -foreground red -bold on -underline off"); /*Команда linux для изменения цвета шрифта, жирности и подчеркнутости*/ 
      printf(" %c | %c | %c ", matrix[i][0], matrix[i][1], matrix[i][2]); 
      if(i!=2) printf("\n---|---|---\n"); 
    } 
  else 
    { 
      system("setterm -foreground blue"); /*Команда linux для изменения цвета шрифта*/ 
      printf("[ %c ][ %c ][ %c ]", matrix[i][0], matrix[i][1], matrix[i][2]); 
      if(i!=2) 
      printf("\n"); 
    } 
  } 
  printf("\n\n"); 
  system("setterm -default"); 
} 

/* Проверка на победу */ 
char check(void) 
{ 
  int i; 
  char *p; 
  for(i=0; i<3; i++) 
  { /* Проверка строк */ 
  p = &matrix[i][0]; 
  if (*p==*(p+1)
  && *(p+1)==*(p+2)) return *p; 
  } 
  for(i=0; i<3; i++) 
  { /* Проверка столбцов */ 
    p = &matrix[0][i]; 
    if(*p==*(p+3) && *(p+3)==*(p+6)) return *p; 
  } 
  /* Проверка диагоналей */ 
  if(matrix[0][0]==matrix[1][1] && matrix[1][1]==matrix[2][2]) 
    return matrix[0][0]; 
  if(matrix[0][2]==matrix[1][1] && matrix[1][1]==matrix[2][0]) 
    return matrix[0][2]; 
  return SPACE; 
}
